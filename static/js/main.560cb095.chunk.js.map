{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","change","toggleMode1","defaultProps","aboutText","Textform","useState","text","setText","style","color","heading","value","onChange","event","target","console","log","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","filter","element","length","Alert","alert","role","word","lower","charAt","slice","Capitalize","msg","App","setMode","setAlert","message","setTimeout","setChange","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.560cb095.chunk.js","sourcesContent":["import React from 'react'//press imr for importing react\r\nimport PropTypes from 'prop-types'//press impt to import proptypes\r\n// import {Link} from 'react-router-dom';//import link and (replace a <-->Link and href<-->to to setup router for do not reloading otherwisw use a and href with loading)\r\n//--------------------------------IMP----------------------------------------------------------------------------------------------------------------------------------------\r\n//use Link And to instead of a and href to avoid laoding page and fast performance\r\n//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------->\r\n// press rfc for function generations\r\nfunction Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n              </li> */}\r\n            </ul>\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input mx-2\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.change}</label>\r\n            </div>\r\n\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'success':'light'}`}>\r\n              <input className=\"form-check-input mx-2\" onClick={props.toggleMode1} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">enable green mode</label>\r\n            </div>\r\n            \r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n//press pts for (proptypes.string)first p should be small otherwise all p inside the object should be capital\r\n//isrequired when given me must provide value otherwise it willl throw an error\r\n//.string is used when only string values we have to give\r\nNavbar.propTypes ={\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string\r\n}\r\n\r\n//defaultpropes used to show some default text when not given\r\nNavbar.defaultProps = {\r\n    title: 'set your title here',\r\n    aboutText: ' about'\r\n};\r\n\r\nexport default Navbar;\r\n","\r\n//press rfce to form a function name as file name\r\n// imrc to import useStates from react\r\nimport React,{useState} from 'react'\r\n\r\n\r\nfunction Textform(props) {\r\n    \r\n    const handleupClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"text converted to Uppercase\",\"success\");\r\n        //below line is optional\r\n        console.log(\" Upper case of \" + text + \" is: \" + newText);//this is only for refrence as it will be seen in console\r\n    }\r\n    const handleclClick = ()=>{\r\n        let newText = \"\";\r\n        setText(newText)\r\n        props.showAlert(\"text is cleared\",\"success\");\r\n        //below line is optional\r\n        console.log(\" clear of  \" + text + \" is: \" + newText);//this is only for refrence as it will be seen in console\r\n    }\r\n    const handleloClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"text converted to Lowercase\",\"success\");\r\n        //below line is optional\r\n        console.log(\" Lower case of \" + text + \" is: \" + newText);//this is only for refrence as it will be seen in console\r\n    }\r\n\r\n    //credit to A of utube shoutout\r\n    const handleCopy = ()=>{\r\n        var text = document.getElementById('Mybox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"text is copied to clipboard\",\"success\");\r\n    }\r\n    const handleExtraSpace =()=>{\r\n        let newText=text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"All Extra spaces are removed from your text\",\"success\");\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n    setText(event.target.value)\r\n    //below line is optional\r\n    console.log(\"event started\");//this is only for refrence as it will be seen in console\r\n    }\r\n    const [text, setText] = useState('Enter text here');//text is default and settext is values to be assign\r\n    // text=\"ganesh\"  ---->this is wrong way to chnage the state\r\n    // setText(\"New text\")----->this is correct way to chamge the state\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode === \"dark\" ? \"white\":\"black\"}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value= {text} onChange={handleOnChange} style={{backgroundColor: props.mode === \"dark\"?\"grey\":\"white\", color: props.mode === 'dark'?'white':'black'}} id=\"Mybox\" rows=\"8\"></textarea>\r\n            </div>\r\n            {/* mx-2 in below line use to give margin in x direction with 2px */}\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handleupClick}>convert to uppercase</button>\r\n            {/*1) red -->danger-2)blue-->primary3)green--->success4)grey-->secondary5)yellow-->warning6)white-->light - 7)black-->dark*/}\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handleloClick}>convert to lowercase</button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handleclClick}>clear text</button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handleCopy}>copy text</button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handleExtraSpace}>remove spaces</button>\r\n        </div>\r\n        {/* my-2 in below line use to give maring in y direction with 2 px */}\r\n        <div className=\"container my-3\" style={{color: props.mode === 'dark'?'white':'black'}}>\r\n            <h1>your text summary</h1>\r\n            <p>{text.split(\" \").filter((element)=>{return element.length!==0}).length}words and {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length} minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter something to preview\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Textform;","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const Capitalize=(word)=>{\r\n        const lower= word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{Capitalize(props.alert.type)}</strong>...!{props.alert.msg}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert;\r\n\r\n","\n//use npm run build to make short system\nimport Navbar from './components/Navbar';\n// import About from './components/About';//temporariry closed\nimport Textform from './components/Textform';//temporarily closed\nimport React, { useState } from 'react'//imrs to import state from raect\nimport Alert from './components/Alert';\n//press npm install react-router-dom to instal package\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";//import router package from reactrouter.com\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  \n  const[alert, setAlert] = useState(null);\n\n  const showAlert =(message , type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    },2000);\n\n  }\n\n  const [change, setChange] = useState(\"Enable Dark Mode\")\n  \n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor='#042743';//#042743\n      setChange(\"Enable Light Mode\")\n      showAlert(\"dark Mode has Been Enabled\",\"success\");\n      document.title='TextUtils-Dark Mode';//to change the title name dynamically when condition gets applied\n      // // IMP------------------->>>>>>>>>>\n      // below code is used to change title repeatedly(title chamkana)\n      // setInterval(() => {\n      //   document.title ='TextUtils-best website';\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title ='TextUtils-must visit';\n      // }, 1500);\n      // //--------------------------_>>>>>>>>\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      setChange(\"Enable Dark Mode\")\n      showAlert(\"light Mode hs Been Enabled\",\"success\")\n      document.title='TextUtils-Light Mode';\n    }\n  }\n  const toggleMode1 = ()=>{\n    if(mode === 'light'){\n      setMode('success');\n      document.body.style.backgroundColor='greenyellow';//#042743\n      // setChange(\"Enable Light Mode\")\n      showAlert(\"green Mode has Been Enabled\",\"success\");\n      document.title='TextUtils-Green Mode';\n    }\n    else if(mode === 'success'){\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      // setChange(\"Enable green Mode\")\n      showAlert(\"light Mode hs Been Enabled\",\"success\")\n      document.title='TextUtils-Light Mode';\n    }\n  }\n   return (\n   <>\n   {/* we here take swith from documentation of router and then put it into the ROuter tage */}\n  {/* <Router> */}\n    <Navbar title=\"TextUtils\" mode={mode} change={change} toggleMode={toggleMode} toggleMode1={toggleMode1} />\n    {/* temporarily closed */}\n    \n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n    {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\"> */}\n          {/* use exact before path to exactly identify the source */}\n            <Textform showAlert={showAlert} heading=\"Enter the text here\" mode={mode}/>\n          {/* </Route>\n    </Switch> */}\n    </div>\n  {/* </Router> */}\n\n    {/* <div className=\"container my-3\">\n    <About/>\n    </div> */}\n   </>\n  );\n}\n\nexport default App;\n\n\n\n\n//------------------------------------------------------------------------------------------------------------------------------->\n//imp-instructions---->to run respective project (i.e about,textform or navbar)uncomment the import statement and function call\n//------------------------------------------------------------------------------------------------------------------------------->\n//imp -->to make nav text blue in dark mode change toogle function dark to black and textform dark to black\n//------------------------------------------------------------------------------------------------------------------------------->","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}