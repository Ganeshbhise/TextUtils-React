{"version":3,"sources":["components/Navbar.js","components/About.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","aboutText","onClick","toggleMode","htmlFor","change","toggleMode1","defaultProps","About","myStyle","color","backgroundColor","style","Textform","useState","text","setText","heading","value","onChange","event","target","console","log","border","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","split","join","filter","element","Alert","height","alert","role","word","lower","charAt","slice","Capitalize","msg","App","setMode","setAlert","message","setTimeout","setChange","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fe4420cf.chunk.js","sourcesContent":["import React from 'react'//press imr for importing react\r\nimport PropTypes from 'prop-types'//press impt to import proptypes\r\nimport {Link} from 'react-router-dom';//import link and (replace a <-->Link and href<-->to to setup router for do not reloading otherwisw use a and href with loading)\r\n//--------------------------------IMP----------------------------------------------------------------------------------------------------------------------------------------\r\n//use Link And to instead of a and href to avoid laoding page and fast performance\r\n//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------->\r\n// press rfc for function generations\r\nfunction Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <Link  className=\"navbar-brand\" to='/'>{props.title}</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"\">Home</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n              </li>\r\n            </ul>\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input mx-2\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.change}</label>\r\n            </div>\r\n\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'success':'light'}`}>\r\n              <input className=\"form-check-input mx-2\" onClick={props.toggleMode1} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">enable green mode</label>\r\n            </div>\r\n            \r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n//press pts for (proptypes.string)first p should be small otherwise all p inside the object should be capital\r\n//isrequired when given me must provide value otherwise it willl throw an error\r\n//.string is used when only string values we have to give\r\nNavbar.propTypes ={\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string\r\n}\r\n\r\n//defaultpropes used to show some default text when not given\r\nNavbar.defaultProps = {\r\n    title: 'set your title here',\r\n    aboutText: ' about'\r\n};\r\n\r\nexport default Navbar\r\n","// import React,{useState} from 'react'//removed\r\n\r\n\r\nfunction About(props) {\r\n// const [myStyle, setmyStyle] = useState({//M capital--(camelcase use by harry------------------------>>>><<<<<<<<<<<>>>>>>>>>><<<<<<<<\r\n\r\n//     color: 'black' ,\r\n//     backgroundColor: 'white'\r\n//     //write css properties in camelcase only \r\n//     // use \"$0\"  to apply proeprties to selected area\r\n// })//removed\r\nlet myStyle ={\r\n    color:props.mode ==='dark'?'white':'black',\r\n    backgroundColor: props.mode ==='dark'?'rgb(85,85,85)':'white',\r\n    // border : '2px solid',\r\n    // borderColor: props.mode==='dark'? 'white':'#042743'\r\n}\r\n// const [btntext, setbtntext] = useState(\"Enable Dark Mode\")//removed\r\n    //  let togglestyle = ()=>{\r\n    //      if(myStyle.color === 'black'){//here === use only for error removal instead == can also work\r\n    //          setmyStyle({\r\n\r\n    //             color: 'white' ,\r\n    //             backgroundColor: 'black',\r\n    //             border: '1px solid white'\r\n               \r\n    //         })\r\n    //         setbtntext(\"Enable Light Mode\")\r\n    //      }\r\n    //      else{\r\n    //          setmyStyle({\r\n\r\n    //             color: 'black' ,\r\n    //             backgroundColor: 'white',\r\n    //             border: '1px solid black'\r\n               \r\n    //         })\r\n    //         setbtntext(\"Enable Dark Mode\")\r\n    //      }\r\n    //  }//removed\r\n\r\n    return (\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <h2 className=\"my-3\">About us</h2>\r\n          <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                    <strong>Analyze your text</strong> \r\n                    </button>\r\n                </h2>\r\n                <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                    <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle}type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                    <strong>free to use</strong>\r\n                    </button>\r\n                </h2>\r\n                <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                    <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                    <strong>Browser Compatible</strong>\r\n                    </button>\r\n                </h2>\r\n                <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                    <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                </div>\r\n                </div>\r\n                </div> \r\n                {/* <div className=\"container my-3\">\r\n                    <button onClick={togglestyle} type=\"button\" className=\"btn btn-primary\">{btntext}</button>\r\n                </div>  */}{/*removed*/}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default About;","\r\n//press rfce to form a function name as file name\r\n// imrc to import useStates from react\r\nimport React,{useState} from 'react'\r\n\r\n\r\nfunction Textform(props) {\r\n    \r\n    const handleupClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"text converted to Uppercase\",\"success\");\r\n        //below line is optional\r\n        console.log(\" Upper case of \" + text + \" is: \" + newText);//this is only for refrence as it will be seen in console\r\n    }\r\n    const handleclClick = ()=>{\r\n        let newText = \"\";\r\n        setText(newText)\r\n        props.showAlert(\"text is cleared\",\"success\");\r\n        //below line is optional\r\n        console.log(\" clear of  \" + text + \" is: \" + newText);//this is only for refrence as it will be seen in console\r\n    }\r\n    const handleloClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"text converted to Lowercase\",\"success\");\r\n        //below line is optional\r\n        console.log(\" Lower case of \" + text + \" is: \" + newText);//this is only for refrence as it will be seen in console\r\n    }\r\n\r\n    //credit to A of utube shoutout\r\n    const handleCopy = ()=>{\r\n        var text = document.getElementById('Mybox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        document.getSelection().removeAllRanges();\r\n        props.showAlert(\"text is copied to clipboard\",\"success\");\r\n    }\r\n    const handleExtraSpace =()=>{\r\n        let newText=text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"All Extra spaces are removed from your text\",\"success\");\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n    setText(event.target.value)\r\n    //below line is optional\r\n    console.log(\"event started\");//this is only for refrence as it will be seen in console\r\n    }\r\n    const [text, setText] = useState('');//text is default and settext is values to be assign\r\n    // text=\"ganesh\"  ---->this is wrong way to chnage the state\r\n    // setText(\"New text\")----->this is correct way to chamge the state\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode === \"dark\" ? \"white\":\"black\"}}>\r\n            <h2 className=\"mb-3\">{props.heading}</h2>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value= {text} onChange={handleOnChange} style={{border:'2px solid black',backgroundColor: props.mode === \"dark\"?\"grey\":\"white\", color: props.mode === 'dark'?'white':'black'}} id=\"Mybox\" rows=\"8\"></textarea>\r\n            </div>\r\n            {/* mx-2 in below line use to give margin in x direction with 2px */}\r\n            <button disabled={text.length===0} className=\"btn btn-dark mx-2 my-2\" onClick={handleupClick}>convert to uppercase</button>\r\n            {/*1) red -->danger-2)blue-->primary3)green--->success4)grey-->secondary5)yellow-->warning6)white-->light - 7)black-->dark*/}\r\n            {/* disabled function is used to disable the properties here buttons are disables under aplied condition */}\r\n            <button disabled={text.length===0} className=\"btn btn-dark mx-2 my-2\" onClick={handleloClick}>convert to lowercase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-dark mx-2 my-2\" onClick={handleclClick}>clear text</button>\r\n            <button disabled={text.length===0} className=\"btn btn-dark mx-2 my-2\" onClick={handleCopy}>copy text</button>\r\n            <button disabled={text.length===0} className=\"btn btn-dark mx-2 my-2\" onClick={handleExtraSpace}>remove spaces</button>\r\n        </div>\r\n        {/* my-2 in below line use to give maring in y direction with 2 px */}\r\n        <div className=\"container my-3\" style={{color: props.mode === 'dark'?'white':'black'}}>\r\n            <h1>your text summary</h1>\r\n            <p>{text.split(\" \").filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length} minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Nothing to preview\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Textform;","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const Capitalize=(word)=>{\r\n        const lower= word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height:'50px'}}>\r\n        {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{Capitalize(props.alert.type)}</strong>...!{props.alert.msg}\r\n        </div>  }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert;\r\n\r\n","//if you want to update the project uploaded to github disable the router \n//use npm run build to make short system\nimport Navbar from './components/Navbar';\nimport About from './components/About';//temporariry closed\nimport Textform from './components/Textform';//temporarily closed\nimport React, { useState } from 'react'//imrs to import state from raect\nimport Alert from './components/Alert';\n//press npm install react-router-dom to instal package\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";//import router package from reactrouter.com\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  \n  const[alert, setAlert] = useState(null);\n\n  const showAlert =(message , type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    },2000);\n\n  }\n\n  const [change, setChange] = useState(\"Enable Dark Mode\")\n  \n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor='black';//#042743\n      setChange(\"Enable Light Mode\")\n      showAlert(\"dark Mode has Been Enabled\",\"success\");\n      // document.title='TextUtils-Dark Mode';//to change the title name dynamically when condition gets applied\n      // // IMP------------------->>>>>>>>>>\n      // below code is used to change title repeatedly(title chamkana)\n      // setInterval(() => {\n      //   document.title ='TextUtils-best website';\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title ='TextUtils-must visit';\n      // }, 1500);\n      // //--------------------------_>>>>>>>>\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      setChange(\"Enable Dark Mode\")\n      showAlert(\"light Mode hs Been Enabled\",\"success\")\n      // document.title='TextUtils-Light Mode';\n    }\n  }\n  const toggleMode1 = ()=>{\n    if(mode === 'light'){\n      setMode('success');\n      document.body.style.backgroundColor='greenyellow';//#042743\n      // setChange(\"Enable Light Mode\")\n      showAlert(\"green Mode has Been Enabled\",\"success\");\n      // document.title='TextUtils-Green Mode';\n    }\n    else if(mode === 'success'){\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      // setChange(\"Enable green Mode\")\n      showAlert(\"light Mode hs Been Enabled\",\"success\")\n      // document.title='TextUtils-Light Mode';\n    }\n  }\n   return (\n   <>\n   {/* we here take swith from documentation of router and then put it into the ROuter tage */}\n  <Router>\n  <Navbar title=\"TextUtils\" mode={mode} change={change} toggleMode={toggleMode} toggleMode1={toggleMode1} />\n    {/* temporarily closed */}\n    \n  <Alert alert={alert}/>\n  <div className=\"container my-3\">\n  <Switch>\n        <Route exact path=\"/about\">\n          <About mode={mode}/>\n        </Route>\n        <Route path=\"/\">\n          {/* use exact before path to exactly identify the source */}\n            <Textform showAlert={showAlert} heading=\"Try TextUtils- Character counter,word counter ,justify content\" mode={mode}/>\n        </Route>\n  </Switch>\n  </div>\n  </Router>\n\n    {/* <div className=\"container my-3\">\n    <About/>\n    </div> */}\n   </>\n  );\n}\n\nexport default App;\n\n\n\n\n//------------------------------------------------------------------------------------------------------------------------------->\n//imp-instructions---->to run respective project (i.e about,textform or navbar)uncomment the import statement and function call\n//------------------------------------------------------------------------------------------------------------------------------->\n//imp -->to make nav text blue in dark mode change toogle function dark to black and textform dark to black\n//------------------------------------------------------------------------------------------------------------------------------->","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}